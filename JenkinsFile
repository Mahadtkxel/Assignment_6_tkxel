def p 

pipeline {
    agent {
        label "docker-agent"
        }
    
    parameters {
        string(name: "BRANCH_NAME", defaultValue: "main")
        string(name: "BITBUCKET_BRANCH_NAME", defaultValue: "master")
        string(name: "GITHUB_URL", defaultValue: "https://github.com/Mahadtkxel/Assignment_6_tkxel.git")
        string(name: "BITBUCKET_URL", defaultValue: "https://mahadkarim@bitbucket.org/mahad_tkxel/assignment_6_tkxel.git")
        string(name: "TOOL_NAME", defaultValue: "sonarqube")
        string(name: "SONAR_PROJECT", defaultValue: "Assignment_6_tkxel")
        string(name: "BITBUCKET_SONAR_PROJECT", defaultValue: "assign6_bitbucket")
        string(name: "IMAGE_TAG", defaultValue: "assign_6_tkxel:react-app")
        string(name: "DOCKERFILE", defaultValue: "assign6-react/dev.Dockerfile")
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                git branch: params.BRANCH_NAME, url: params.GITHUB_URL
            }
        }
        stage('Sonarqube Code Analysis') {
            environment {
                scannerHome = tool name: params.TOOL_NAME
            }
            steps {
                script {
                    withSonarQubeEnv(params.TOOL_NAME) {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=${params.SONAR_PROJECT} \
                                -Dsonar.projectName=${params.SONAR_PROJECT} \
                                -Dsonar.sources=.
                        """
                    }
                }
            }
        }

        stage("Building Docker Image") {
            steps {
                script {
                    sh "docker build -t ${params.IMAGE_TAG} -f ${params.DOCKERFILE} ./assign6-react"
                }
             }
        }

        stage('Checkout BitBucket Code') {
            steps {
                dir("bitbucket-repo"){
                    git branch: params.BITBUCKET_BRANCH_NAME, url: params.BITBUCKET_URL
                }
            }
        }

        stage('Sonarqube BitBucket Code Analysis') {
            environment {
                scannerHome = tool name: params.TOOL_NAME
            }
            steps {
                script {
                    dir("bitbucket-repo"){
                        withSonarQubeEnv(params.TOOL_NAME) {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=${params.BITBUCKET_SONAR_PROJECT} \
                                -Dsonar.projectName=${params.BITBUCKET_SONAR_PROJECT} \
                                -Dsonar.sources=.
                        """
                    }
                    }
                    
                }
            }
        }

        stage("push image to dockerhub") {
            steps {
                
                    withCredentials([usernamePassword(credentialsId: "docklogin", usernameVariable: "DOCK_USER", passwordVariable: "DOCKER_PASS")]) {
                        script {
                            sh """
                                    echo "$DOCKER_PASS | docker login -u "$DOCK_USER" --password-stdin
                                    docker push ${params.IMAGE_TAG}
                                """
                        }
                    }
                
                
            }
        }

        
    }

    post {
    
        success {
            echo '********** Build successful! **********'
        }
        failure {
            echo '********** Build failed! **********'
        }
    }
    
}